package com.gli.controller;

import com.gli.model.Quote;
import com.gli.service.PremiumCalculationService;
import com.gli.service.QuoteService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/quotes")
@CrossOrigin
public class QuoteController {

    @Autowired
    private QuoteService quoteService;

    @Autowired
    private PremiumCalculationService premiumCalculationService;

    @PostMapping("/create")
    public Quote createQuote(@RequestBody Quote quote) {
        double calculatedPremium = premiumCalculationService.calculatePremium(quote);
        quote.setPremium(calculatedPremium);
        return quoteService.saveQuote(quote);
    }

    @GetMapping("/{id}")
    public Quote getQuoteById(@PathVariable Long id) {
        return quoteService.getQuoteById(id);
    }

    @GetMapping
    public Iterable<Quote> getAllQuotes() {
        return quoteService.getAllQuotes();
    }

    @PutMapping("/{id}")
    public Quote updateQuote(@PathVariable Long id, @RequestBody Quote quoteDetails) {
        Quote existingQuote = quoteService.getQuoteById(id);
        if (existingQuote == null) {
            throw new RuntimeException("Quote not found with id: " + id);
        }

        // Update fields from request
        existingQuote.setBusinessType(quoteDetails.getBusinessType());
        existingQuote.setAnnualRevenue(quoteDetails.getAnnualRevenue());
        existingQuote.setClaimHistory(quoteDetails.getClaimHistory());
        existingQuote.setCoverageAmount(quoteDetails.getCoverageAmount());
        existingQuote.setDeductible(quoteDetails.getDeductible());
        existingQuote.setNumberOfEmployees(quoteDetails.getNumberOfEmployees());
        existingQuote.setLocationRisk(quoteDetails.getLocationRisk());
        existingQuote.setBodilyInjuryCoverage(quoteDetails.getBodilyInjuryCoverage());
        existingQuote.setPropertyDamageCoverage(quoteDetails.getPropertyDamageCoverage());
        existingQuote.setPersonalAdvertisingInjuryCoverage(quoteDetails.getPersonalAdvertisingInjuryCoverage());

        // Recalculate premium
        double newPremium = premiumCalculationService.calculatePremium(existingQuote);
        existingQuote.setPremium(newPremium);

        return quoteService.saveQuote(existingQuote);
    }

    @DeleteMapping("/{id}")
    public String deleteQuote(@PathVariable Long id) {
        quoteService.deleteQuote(id);
        return "Quote deleted successfully";
    }
}
