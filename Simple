package com.gli.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import lombok.Data;

@Data
public class BrokerRegisterRequest {

    @NotBlank(message = "Broker name is required")
    private String name;

    @Email(message = "Email should be valid")
    @NotBlank(message = "Email is required")
    private String email;

    @Pattern(regexp = "^[0-9]{10}$", message = "Contact number should be 10 digits")
    private String contactNumber;

    @NotBlank(message = "Password is required")
    private String password;

    @NotBlank(message = "Confirm password is required")
    private String confirmPassword;

    public boolean isPasswordMatching() {
        return this.password != null && this.password.equals(this.confirmPassword);
    }
}


public Broker registerBroker(BrokerRegisterRequest request) {
    if (!request.isPasswordMatching()) {
        throw new IllegalArgumentException("Password and Confirm Password do not match");
    }

    Broker broker = new Broker();
    broker.setName(request.getName());
    broker.setEmail(request.getEmail());
    broker.setContactNumber(request.getContactNumber());
    broker.setPassword(request.getPassword());
    return brokerRepository.save(broker);
}


@PostMapping("/register")
public ResponseEntity<?> register(@RequestBody @Valid BrokerRegisterRequest request) {
    try {
        Broker broker = brokerService.registerBroker(request);
        return ResponseEntity.ok(broker);
    } catch (IllegalArgumentException e) {
        return ResponseEntity.badRequest().body(e.getMessage());
    }
}
